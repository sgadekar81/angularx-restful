{"version":3,"sources":["../../srv/rest.service.ts"],"names":[],"mappings":"AAAA,0CAAC;AACD,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,IAAA,EAAe,MAAO,eAAA,CAAgB;AAC/C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,yBAAA,CAA0B;AACjC,OAAO,uBAAA,CAAwB;AAC/B,OAAO,2BAAA,CAA4B;AAGnC,OAAO,EAAE,MAAA,EAAO,MAAW,8BAAA,CAA+B;AAG1D;IACC,qBAAqB,IAAU,EAAS,OAAc;QAAjC,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAO;QACrD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAC,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,yBAAG,GAAH,UAAI,MAAiB;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;aAC7B,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5B,CAAC;IAAA,CAAC;IACF,0BAAI,GAAJ,UAAK,MAAiB;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAC,MAAM,CAAC,OAAO,EAAC,EAAC,OAAO,EAAC,IAAI,CAAC,SAAS,EAAE,EAAC,CAAC;aACxE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAAA,CAAC;IACF,yBAAG,GAAH,UAAI,MAAiB;QACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAC,MAAM,CAAC,OAAO,EAAC,EAAC,OAAO,EAAC,IAAI,CAAC,SAAS,EAAE,EAAC,CAAC;aACvE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAAA,CAAC;IACF,4BAAM,GAAN,UAAO,MAAiB;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC;aAChC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IACD,cAAc;IACN,iCAAW,GAAnB,UAAoB,GAAa;QAC/B,MAAM,CAAC,GAAG,CAAC;QACX,yBAAyB;QACzB,4BAA4B;IAC9B,CAAC;IACO,iCAAW,GAAnB,UAAqB,KAAqB;QACzC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,CAAC;QACxD,gBAAgB;QACf,sBAAsB;QACtB,mCAAmC;QACnC,qCAAqC;QACrC,oDAAoD;QACpD,WAAW;QACX,+DAA+D;QAC/D,IAAI;QACJ,mCAAmC;IACrC,CAAC;IAEO,+BAAS,GAAjB;QACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAC,EAAE,CAAC,CAAA;IAC7C,CAAC;IACK,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,0BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,IAAI,GAAG;QACd,EAAC,IAAI,EAAE,MAAM,GAAG;KACf,EAH6F,CAG7F,CAAC;IACF,kBAAC;CAvDD,AAuDC,IAAA;SAvDY,WAAW","file":"rest.service.js","sourceRoot":"","sourcesContent":["//created by just be project builder 1.0.0\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/observable/throw';\r\nimport { RestParams } from '../classes/rest-params';\r\n\r\nimport { LftSrv }     from 'angularx-headers/lft.service';\r\n\r\n\r\nexport class RestService {\t\r\n\tconstructor (private http: Http,private _lftSrv:LftSrv) {\r\n\t\tconsole.log(this._lftSrv.hdrs('authorization',''));\r\n\t}\r\n\t\t\r\n\tget(params:RestParams){\r\n\t\treturn this.http.get(params.uri)\r\n\t\t\t\t.map(this.extractData)\r\n\t\t\t\t.catch(this.handleError);\r\n\t};\r\n\tpost(params:RestParams){\r\n\t  return this.http.post(params.uri,params.payload,{headers:this.getDftHdr()})\r\n\t    .map(this.extractData)\r\n\t    .catch(this.handleError);\r\n\t};\r\n\tput(params:RestParams){\r\n\t  return this.http.put(params.uri,params.payload,{headers:this.getDftHdr()})\r\n\t    .map(this.extractData)\r\n\t    .catch(this.handleError);\r\n\t};\r\n\tdelete(params:RestParams){\r\n\t  return this.http.delete(params.uri)\r\n\t    .map(this.extractData)\r\n\t    .catch(this.handleError);\r\n\t}\r\n\t//sub methodes\r\n\tprivate extractData(res: Response) {\r\n\t  return res;\r\n\t  // let body = res.json();\r\n\t  // return body._body || { };\r\n\t}\r\n\tprivate handleError (error: Response | any) {\r\n\t\treturn Observable.throw(error.json() || 'Server error');\r\n\t\t// return error;\r\n\t  // let errMsg: string;\r\n\t  // if (error instanceof Response) {\r\n\t  //   const body = error.json() || '';\r\n\t  //   const err = body.error || JSON.stringify(body);\r\n\t  // } else {\r\n\t  //   errMsg = error.message ? error.message : error.toString();\r\n\t  // }\r\n\t  // return Observable.throw(errMsg);\r\n\t}\r\n\r\n\tprivate getDftHdr(){\r\n\t\treturn this._lftSrv.hdrs('authorization','')\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: LftSrv, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}